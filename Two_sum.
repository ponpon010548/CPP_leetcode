O(n) solution using unordered_map
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, int> m;
        for(int i = 0; i < nums.size(); i++){
            int temp = target - nums[i];
            if(m.find(temp) != m.end()){                //map.find(key) find the corresponding key.
                ans.push_back (i);
                ans.push_back (m.find(temp)->second);
                break;            
                }
            m[nums[i]] = i;
        }
        return ans;
    }     
};


class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for (int j = 0; j < size(nums);j++){
            for(int i = 1 + j; i < size(nums); i++ ){
                int temp = target - nums[j];
                if ((temp - nums[i]) == 0 ){
                    ans.push_back (j);
                    ans.push_back (i);
                    break;
                }
            }
        }
    return ans;
    }
};
