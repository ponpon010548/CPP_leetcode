//simple version
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(0);
        ListNode* p_res = res;                               //result
        int c = 0;                                           //carry
        while(l1 && l2){                                     //l1 and l2 must be done simultaneously
            int sum = l1->val + l2->val + c;                // add two numbers and the carry
            c = 0;                                          //carry should be reset to zero after calculating the sum
            if (sum >9){                                   
                c = sum / 10;     
                sum = sum % 10;
            }
            ListNode* temp = new ListNode(sum);               //new node with value equal to sum
            res->next = temp;                                 
            res = res -> next;
            if(l1 -> next == NULL && l2 -> next != NULL){      //check : whether it is the last node of l1 or not 
                ListNode* temp2 = new ListNode(0);           
                l1 -> next = temp2;                             //we add a node to l1
            }
            if(l2 -> next == NULL && l1 -> next != NULL){     //check : whether it is the last node of l2 or not
                ListNode* temp2 = new ListNode(0);
                l2 -> next = temp2;                           //we add a node to l1
            }
            l1 = l1 -> next;
            l2 = l2 -> next;
        }
        
        if(c){                                               //if carry is not zero, then we have to add a node
            ListNode* temp = new ListNode(c);
            res->next = temp;
            res = res -> next;
        }
        return p_res->next;                                  //because we do not need the first node
    }

};

//use less memory than the above
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(0);
        ListNode* p_res = res;
        int c = 0;
        int val1, val2 = 0;
        while(l1 || l2){
            val1 = (l1) ? l1->val : 0;                     // if l1==NULL, then we set the value = 0
            val2 = (l2) ? l2->val : 0;                     // if l2==NULL, then we set the value = 0
            int sum = val1 + val2 + c;
            c = 0;            
            if (sum >9){
                c = sum / 10;
                sum = sum % 10;
            }
            ListNode* temp = new ListNode(sum);            
            res->next = temp;
            res = res -> next;
            if(l1)                                      //if l1==NULL then l1 would not move
                l1 = l1 -> next;                 
            if(l2)                                      //if l2==NULL then l2 would not move
                l2 = l2 -> next;
        }
        
        if(c){
            ListNode* temp = new ListNode(c);
            res->next = temp;
            res = res -> next;
        }
        return p_res->next;
    }
};
