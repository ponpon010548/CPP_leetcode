//simple version
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p_l1 = l1;
        ListNode* p_l2 = l2;
        ListNode* res = new ListNode(0);
        ListNode* p_res = res;
        int c = 0;
        while(p_l1 && p_l2){
            int sum = p_l1->val + p_l2->val + c;
            ListNode* temp = new ListNode(0);
            if (sum >9){
                c = sum / 10;
                sum = sum % 10;
            }
            else c = 0;
            temp-> val = temp -> val + sum;            
            res->next = temp;
            res = res -> next;
            if(p_l1 -> next == NULL && p_l2 -> next != NULL){
                ListNode* temp2 = new ListNode(0);
                p_l1 -> next = temp2;
            }
            if(p_l2 -> next == NULL && p_l1 -> next != NULL){
                ListNode* temp2 = new ListNode(0);
                p_l2 -> next = temp2;
            }
            p_l1 = p_l1 -> next;
            p_l2 = p_l2 -> next;
        }
        
        if(c){
            ListNode* temp = new ListNode(c);
            res->next = temp;
            res = res -> next;
        }
        return p_res->next;
    }

};

//use less memory than the above
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p_l1 = l1;
        ListNode* p_l2 = l2;
        ListNode* res = new ListNode(0);
        ListNode* p_res = res;
        int c = 0;
        while(p_l1 && p_l2){
            int sum = p_l1->val + p_l2->val + c;
            ListNode* temp = new ListNode(0);
            if (sum >9){
                c = sum / 10;
                sum = sum % 10;
            }
            else c = 0;
            temp-> val = temp -> val + sum;            
            res->next = temp;
            res = res -> next;
            p_l1 = p_l1 -> next;
            p_l2 = p_l2 -> next;
        }
        if(p_l1){
            while(c && p_l1){
                int sum = p_l1->val + c;
                ListNode* temp = new ListNode(0);
                if (sum >9){
                c = sum / 10;
                sum = sum % 10;
                }
                else c = 0;
                 temp-> val = temp -> val + sum;
                res->next = temp;
                res = res -> next;
                p_l1 = p_l1 -> next;
            }
            if(p_l1)
                res->next = p_l1;
        }
        if(p_l2){
            while(c && p_l2){
                int sum = p_l2->val + c;
                ListNode* temp = new ListNode(0);
                if (sum >9){
                c = sum / 10;
                sum = sum % 10;
                }
                else c = 0;
                 temp-> val = temp -> val + sum;
                res->next = temp;
                res = res -> next;
                p_l2 = p_l2 -> next;
            }
            if(p_l2)
                res->next = p_l2;
        }
        if(c){
            ListNode* temp = new ListNode(c);
            res->next = temp;
            res = res -> next;
        }
        return p_res->next;
    }

};
